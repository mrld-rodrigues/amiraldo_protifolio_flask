#!/usr/bin/env python3
"""
Teste do sistema Keep-Alive
"""

import os
import sys

# Adicionar o diret√≥rio raiz ao PYTHONPATH
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
if project_root not in sys.path:
    sys.path.insert(0, project_root)

def test_keep_alive_service():
    """Testa o servi√ßo keep-alive"""
    print("üîç TESTANDO SERVI√áO KEEP-ALIVE")
    print("=" * 50)
    
    try:
        # Importar o servi√ßo
        from app.core.services.keep_alive import KeepAliveService, get_keep_alive_service
        print("‚úÖ Servi√ßo keep-alive importado com sucesso")
        
        # Criar inst√¢ncia para teste (desabilitada)
        os.environ['KEEP_ALIVE_ENABLED'] = 'false'
        service = KeepAliveService()
        print("‚úÖ Inst√¢ncia do servi√ßo criada")
        
        # Testar status
        status = service.status()
        print(f"‚úÖ Status obtido: {status}")
        
        # Testar fun√ß√µes de conveni√™ncia
        from app.core.services import start_keep_alive, stop_keep_alive, keep_alive_status
        print("‚úÖ Fun√ß√µes de conveni√™ncia importadas")
        
        # Testar status global
        global_status = keep_alive_status()
        print(f"‚úÖ Status global: {global_status}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_health_endpoint():
    """Testa o endpoint de health check"""
    print("\nüîç TESTANDO ENDPOINT HEALTH CHECK")
    print("=" * 50)
    
    try:
        # Configurar ambiente de teste
        os.environ['SECRET_KEY'] = 'test-key-for-health-check'
        os.environ['FLASK_ENV'] = 'testing'
        os.environ['KEEP_ALIVE_ENABLED'] = 'false'
        
        from app import create_app
        app = create_app('testing')
        
        with app.test_client() as client:
            response = client.get('/health')
            
            print(f"‚úÖ Status code: {response.status_code}")
            
            if response.status_code == 200:
                data = response.get_json()
                print(f"‚úÖ Response data: {data}")
                
                # Verificar campos obrigat√≥rios
                required_fields = ['status', 'timestamp', 'environment', 'version']
                for field in required_fields:
                    if field in data:
                        print(f"‚úÖ Campo '{field}' presente: {data[field]}")
                    else:
                        print(f"‚ùå Campo '{field}' ausente")
                        return False
                
                return True
            else:
                print(f"‚ùå Status code inesperado: {response.status_code}")
                return False
        
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_production_mode():
    """Testa modo de produ√ß√£o (sem iniciar o keep-alive real)"""
    print("\nüîç TESTANDO MODO PRODU√á√ÉO (SIMULADO)")
    print("=" * 50)
    
    try:
        # Simular produ√ß√£o mas com keep-alive desabilitado
        os.environ['SECRET_KEY'] = 'test-key-for-production'
        os.environ['FLASK_ENV'] = 'production'
        os.environ['KEEP_ALIVE_ENABLED'] = 'false'
        
        from app import create_app
        app = create_app('production')
        
        with app.test_client() as client:
            # Testar health check em modo produ√ß√£o
            response = client.get('/health')
            
            if response.status_code == 200:
                data = response.get_json()
                print(f"‚úÖ Health check em produ√ß√£o: {data['status']}")
                print(f"‚úÖ Ambiente: {data['environment']}")
                
                if 'keep_alive' in data:
                    print(f"‚úÖ Status keep-alive: {data['keep_alive']}")
                
                return True
            else:
                print(f"‚ùå Health check falhou: {response.status_code}")
                return False
        
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Executa todos os testes"""
    print("üöÄ TESTES DO SISTEMA KEEP-ALIVE")
    print("=" * 60)
    
    tests = [
        ("Servi√ßo Keep-Alive", test_keep_alive_service),
        ("Health Check Endpoint", test_health_endpoint),
        ("Modo Produ√ß√£o", test_production_mode)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüìç {test_name}")
        if test_func():
            passed += 1
            print(f"‚úÖ {test_name}: PASSOU")
        else:
            print(f"‚ùå {test_name}: FALHOU")
    
    print("\n" + "=" * 60)
    print(f"üìä RESULTADO: {passed}/{total} testes passaram")
    
    if passed == total:
        print("üéâ TODOS OS TESTES DO KEEP-ALIVE PASSARAM!")
        print("‚úÖ Sistema keep-alive pronto para produ√ß√£o")
        return True
    else:
        print("‚ö†Ô∏è  ALGUNS TESTES FALHARAM")
        print("üîß Revise a implementa√ß√£o do keep-alive")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
